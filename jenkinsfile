#!/usr/bin/env groov
pipeline {
  environment {
    imageName = "xcarlosr/mfe-dashboard"
    dockerhubId = 'dockerhub'
    dockerImage = ''
  }

  agent any
  tools { nodejs "node" }

  stages {
    stage("Updade Source"){
      steps {
        // deleteDir()
        checkout scm
      }
    }

    stage('NPM Install') {
      steps {
        script {
            sh 'npm i'
        }
      }
    }

    // stage('Test') {
    //     withEnv(["CHROME_BIN=/usr/bin/chromium-browser"]) {
    //       sh 'ng test --progress=false --watch false'
    //     }
    //     junit '**/test-results.xml'
    // }

    // stage('Lint') {
    //     sh 'ng lint'
    // }

    stage('Build All Projects ') {
      steps {
        script {
          sh 'npx nx build dashboard'
        }
      }
    }

    stage('Docker') {
      stages {
          stage('Create Image') {
            steps {
              script {
                dockerImage = docker.build("$imageName:$BUILD_NUMBER","-f ./apps/dashboard/Dockerfile .")
              }
            }
          }
          stage('Push Image') {
              steps {
                echo "Push Image..."
                script {
                      docker.withRegistry('', dockerhubId){
                      dockerImage.push('latest')
                      dockerImage.push("$BUILD_NUMBER")
                    }
                }
            }
          }

          stage('Remove Unused docker image') {
            steps{
              echo "Remove Unused docker image..."
              sh "docker rmi $imageName:latest"
              sh "docker rmi $imageName:$BUILD_NUMBER"
            }
          }
      }
    }

    // stage("Docker Build") {
    //   stages{
    //     stage('Create Image') {
    //       steps {
    //         script {
    //           dockerapp = docker.build("mfe/dashboard:${evn.BUILD_ID}","-f ./apps/dashboard/Dockerfile .")
    //         }
    //       }
    //     }
    //     stage("Docker push Image") {
    //         steps {
    //             docker.withRegistry('https://hub.docker.com/', 'dockerhub'){
    //               dockerapp.push('latest')
    //               dokcerapp.push("${evn.BUILD_ID}")
    //             }
    //         }
    //     }
    //   }
    // }

    // stage('Archive') {
    //     sh 'tar -cvzf dist.tar.gz --strip-components=1 dist'
    //     archive 'dist.tar.gz'
    // }

    // stage('Deploy') {
    //     // milestone()
    //  steps {
    //     echo "Deploying..."
    //   }
    // }


    // stage("Get Source") {
    //       steps {
    //           git url: 'https://github.com/xcarlosr/mfe-poc.git', branch: 'master'
    //       }
    //   }
    //     stage("Docker Build") {
    //         steps {
    //             script {
    //               dockerapp = docker.build("mfe/dashboard:${evn.BUILD_ID}"),
    //               "-f ./apps/dashboard/Dockerfile ."
    //             }
    //         }
    //     }
    //     stage("Docker push Image") {
    //         steps {
    //             docker.withRegistry('https://registry.hub.dokcer.com', 'dokcerhub'){
    //               dockerapp.push('latest')
    //               dokcerapp.push("${evn.BUILD_ID}")
    //             }
    //         }
    //     }
  }
}
